# C++ toolchain
# Recommended by https://github.com/grailbio/bazel-toolchain/blob/0.7.2/README.md
build --incompatible_enable_cc_toolchain_resolution

# Always use the pre-configured toolchain.
build --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# Use a static value for `PATH` and does not inherit `LD_LIBRARY_PATH`. Doesn't let environment
# variables like `PATH` sneak into the build, which can cause massive cache misses when they change.
# Use `--action_env=ENV_VARIABLE` if you want to inherit specific environment variables from the
# client, but note that doing so can prevent cross-user caching if a shared cache is used.
# Docs: https://bazel.build/reference/command-line-reference#flag--incompatible_strict_action_env
build --incompatible_strict_action_env

# Silences spurious warnings like:
# `bazel-out/k8-fastbuild/bin/external/com_github_grpc_grpc/external/com_github_grpc_grpc: warning: directory does not exist`
build --incompatible_generated_protos_in_virtual_imports
build --incompatible_default_to_explicit_init_py

# Set a higher timeout value, just in case.
build --remote_timeout=3600

# Set remote cache access
build --remote_cache=https://storage.googleapis.com/intrinsic-bazel-cache
build --google_credentials=/workspaces/.bazel-cache-access.json
